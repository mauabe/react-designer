{"version":3,"sources":["hotel.js"],"names":["PostForm","props","typeOptions","Object","keys","messageTypes","map","key","hasOwnProperty","defaultType","state","messageText","messageType","handleTextChange","bind","handleTypeChange","postStatusUpdate","event","setState","target","value","preventDefault","newStatus","msg","type","time","date","format","Date","axios","post","apiUrl","then","response","console","log","data","success","React","Component","StatusMessage","statusDate","parse","dateFormat","StatusMessageList","retrieveStatusMessages","get","statuses","isLoaded","status","id","displayStatusMessages","StatusMessageManager","management","dining","ops","plumbing","pool","ReactDOM","render","document","getElementById"],"mappings":"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","sourcesContent":["class PostForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Type options are an object; convert to an array and map\n    this.typeOptions = Object.keys(props.messageTypes).map(function(key) {\n      if (props.messageTypes.hasOwnProperty(key)) {\n        return (\n          <option key={key} value={key}>\n            {props.messageTypes[key]}\n          </option>\n        );\n      }\n    });\n\n    // so we don't have to type this over and over\n    this.defaultType = this.typeOptions[0].key;\n\n    this.state = {\n      messageText: \"\",\n      messageType: this.defaultType\n    }\n    this.handleTextChange = this.handleTextChange.bind(this);\n    this.handleTypeChange = this.handleTypeChange.bind(this);\n    this.postStatusUpdate = this.postStatusUpdate.bind(this);\n\n    function handleTextChange(event){\n      this.setState({\n        messageText: event.target.value\n      })\n    }\n\n    function handleTypeChange(event){\n      this.setState({\n        messageType: event.target.value\n      })\n    }\n\n    function postStatusUpdate(event){\n      event.preventDefault();\n\n      const newStatus = {\n        msg: this.state.messageText,\n        type: this.state.messageType,\n        time: date.format(new Date(), \"YYYY-MM-DD, HH:mm\")\n      };\n  \n      axios.post(this.props.apiUrl + \"/post.php\", newStatus)\n      .then( function(response) {\n          console.log(response);\n          \n          if (response.data.success) {\n            // Update state\n          }\n        }.bind(this)\n      );\n    }\n  }\n\n  render() {\n    return (\n      <form onSubmit= {this.postStatusUpdate}>\n        <h3>Post an Update</h3>\n\n        <div className=\"field-group\">\n          <label htmlFor=\"txt-message\">Message</label>\n          <textarea id=\"txt-message\" rows=\"2\" onChange={this.handleTextChange} value={this.state.messageText} />\n        </div>\n\n        <div className=\"field-group\">\n          <label htmlFor=\"txt-type\">Type</label>\n          <select id=\"txt-type\" onChange={this.handleTypeChange} value={this.state.messageType}>{this.typeOptions}</select>\n        </div>\n\n        <div className=\"field-group action\">\n          <input type=\"submit\" value=\"Post Update\" />\n        </div>\n      </form>\n    );\n  }\n}\n\nfunction StatusMessage(props) {\n  var statusDate = date.parse(props.time, \"YYYY-MM-DD, HH:mm\"),\n    dateFormat = \"M/D/Y, h:mm A\";\n\n  return (\n    <div className=\"status-message\">\n      {props.msg}\n      <span className=\"name\">— {props.type}</span>\n      <span className=\"time\">{date.format(statusDate, dateFormat)}</span>\n    </div>\n  );\n}\n\nclass StatusMessageList extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // this.state = {\n    //   statuses: [],\n    //   // this.stubStatuses\n    //   isLoaded: false\n    // };\n  }\n\n  componentDidMount(){\n    this.retrieveStatusMessages()\n  }\n\n  retrieveStatusMessages(){\n    axios.get(this.props.apiUrl + \"/get.php?delay=5\")\n        .then((response) => {\n          this.setState({\n            statuses: response.data,\n            isLoaded: true\n          });\n        });\n  }\n\n  displayStatusMessages() {\n    return this.state.statuses.map(\n      function(status) {\n        return (\n          <li key={status.id}>\n            <StatusMessage\n              msg={status.msg}\n              type={this.props.messageTypes[status.type]}\n              time={status.time}\n            />\n          </li>\n        );\n      }.bind(this)\n    );\n  }\n\n  render() {\n    if(this.state.isLoaded){\n      return <ul id=\"status-list\">{this.displayStatusMessages()}</ul>;\n    } else {\n      return (\n        <div id=\"status-list\" className=\"loading\">\n          Loading...\n          <div className=\"spinner\">\n            <div className=\"bounce1\" />\n            <div className=\"bounce2\" />\n            <div className=\"bounce3\" />\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nclass StatusMessageManager extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // just a property, doesn't have to be state\n    this.messageTypes = {\n      management: \"Management\",\n      dining: \"Dining Services\",\n      ops: \"Operations\",\n      plumbing: \"Plumbing\",\n      pool: \"Pool\"\n    };\n\n    this.apiUrl = \"http://localhost:5500/Ch04/status_api/\";\n\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div id=\"post-status\">\n          <PostForm messageTypes={this.messageTypes} apiUrl={this.apiUrl}/>\n        </div>\n        <StatusMessageList messageTypes={this.messageTypes} apiUrl={this.apiUrl}/>\n      </React.Fragment>\n    );\n  }\n}\n\nReactDOM.render(<StatusMessageManager />, document.getElementById(\"react-statusmanager\"));\n"]}